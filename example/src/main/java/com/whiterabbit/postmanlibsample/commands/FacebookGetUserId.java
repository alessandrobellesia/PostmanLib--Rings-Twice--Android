package com.whiterabbit.postmanlibsample.commands;

import android.content.Context;
import android.os.Parcel;
import android.util.Log;
import com.whiterabbit.postman.commands.RequestExecutor;
import com.whiterabbit.postman.commands.RestServerRequest;
import com.whiterabbit.postman.exceptions.PostmanException;
import com.whiterabbit.postman.exceptions.ResultParseException;
import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.node.ArrayNode;
import org.scribe.exceptions.OAuthException;
import org.scribe.model.OAuthRequest;
import org.scribe.model.Response;
import org.scribe.model.Verb;

import java.io.IOException;

/**
 * Created with IntelliJ IDEA.
 * User: fedepaol
 * Date: 12/18/12
 * Time: 12:41 AM
 */
public class FacebookGetUserId implements RestServerRequest {
    private static final String url = "https://graph.facebook.com/search";
    private final String mName;

    public FacebookGetUserId(String name) {
        mName = name;
    }

    @Override
    public String getOAuthSigner() {
        return "Facebook";
    }

    @Override
    public String getUrl() {
        return url;
    }

    @Override
    public Verb getVerb() {
        return Verb.GET;
    }

    @Override
    public void onHttpResult(Response result, int statusCode, RequestExecutor executor, Context context) throws ResultParseException {
        ObjectMapper mapper = new ObjectMapper();
        try {
            JsonNode root = mapper.readTree(result.getBody());
            ArrayNode data = (ArrayNode) root.path("data");
            for (JsonNode n : data) {
                String name = n.path("name").getTextValue();
                String id = n.path("id").getTextValue();
                FacebookGetUserInfo getUserInfo = new FacebookGetUserInfo(id);
                try {
                    executor.executeRequest(getUserInfo, context);
                } catch (PostmanException e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                }
                return; // This is a sample. Not interested in other nodes.
            }
        } catch (IOException e) {
            throw new ResultParseException("Failed to parse response");
        }
    }

    @Override
    public void onHttpError(int statusCode, RequestExecutor executor, Context context) {
        Log.e("Facebook", "Http error " + statusCode);
    }

    @Override
    public void onOAuthExceptionThrown(OAuthException exception) {
        //TODO Autogenerated
    }

    @Override
    public void addParamsToRequest(OAuthRequest request) {
        request.addQuerystringParameter("q", mName);
        request.addQuerystringParameter("type", "user");
    }

    @Override
    public int describeContents() {
        return 0;  //TODO Autogenerated
    }

    @Override
    public void writeToParcel(Parcel parcel, int i) {
        parcel.writeString(mName);
    }

    public static final Creator<FacebookGetUserId> CREATOR
            = new Creator<FacebookGetUserId>() {
        public FacebookGetUserId createFromParcel(Parcel in) {
            return new FacebookGetUserId(in);
        }

        public FacebookGetUserId[] newArray(int size) {
            return new FacebookGetUserId[size];
        }
    };

    public FacebookGetUserId(Parcel in) {
        mName = in.readString();
    }
}
