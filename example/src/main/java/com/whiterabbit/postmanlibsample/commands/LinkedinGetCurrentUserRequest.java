package com.whiterabbit.postmanlibsample.commands;

import android.content.Context;
import android.os.Parcel;
import android.util.Log;
import com.whiterabbit.postman.commands.RequestExecutor;
import com.whiterabbit.postman.commands.RestServerRequest;
import com.whiterabbit.postman.exceptions.ResultParseException;
import com.whiterabbit.postmanlibsample.StoreUtils;
import org.scribe.exceptions.OAuthException;
import org.scribe.model.OAuthRequest;
import org.scribe.model.Response;
import org.scribe.model.Verb;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import java.io.IOException;

/**
 * Created with IntelliJ IDEA.
 * User: fedepaol
 * Date: 12/18/12
 * Time: 12:41 AM
 */
public class LinkedinGetCurrentUserRequest implements RestServerRequest {
    private static final String url = "http://api.linkedin.com/v1/people/~";

    public LinkedinGetCurrentUserRequest() {

    }

    @Override
    public String getOAuthSigner() {
        return "Linkedin";
    }

    @Override
    public String getUrl() {
        return url;
    }

    @Override
    public Verb getVerb() {
        return Verb.GET;
    }

    @Override
    public void onHttpResult(Response result, int statusCode, RequestExecutor executor, Context context) throws ResultParseException {
        XmlPullParserFactory factory = null;
        try {
            factory = XmlPullParserFactory.newInstance();
            factory.setNamespaceAware(true);
            XmlPullParser xpp = null;
            xpp = factory.newPullParser();

            xpp.setInput(result.getStream(), null);
            int eventType = xpp.getEventType();

            while (eventType != XmlPullParser.END_DOCUMENT) {
                if (eventType == XmlPullParser.START_TAG) {
                    String tagName = xpp.getName();
                    if (tagName.equals("headline")) {
                        StoreUtils.setLinkedinUserDetails(xpp.nextText(), context);
                        return;
                    }
                }
                eventType = xpp.next();
            }
        } catch (XmlPullParserException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        } catch (IOException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
    }

    @Override
    public void onHttpError(int statusCode, RequestExecutor executor, Context context) {
        Log.e("Linkedin", "Http error " + statusCode);
    }

    @Override
    public void onOAuthExceptionThrown(OAuthException exception) {
        //TODO Autogenerated
    }

    @Override
    public void addParamsToRequest(OAuthRequest request) {
    }

    @Override
    public int describeContents() {
        return 0;  //TODO Autogenerated
    }

    @Override
    public void writeToParcel(Parcel parcel, int i) {
    }

    public static final Creator<LinkedinGetCurrentUserRequest> CREATOR
            = new Creator<LinkedinGetCurrentUserRequest>() {
        public LinkedinGetCurrentUserRequest createFromParcel(Parcel in) {
            return new LinkedinGetCurrentUserRequest(in);
        }

        public LinkedinGetCurrentUserRequest[] newArray(int size) {
            return new LinkedinGetCurrentUserRequest[size];
        }
    };

    public LinkedinGetCurrentUserRequest(Parcel in) {
    }

}
